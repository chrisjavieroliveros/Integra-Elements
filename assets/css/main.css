/**
 * Project: SMACSS SCSS Architecture
 * Description: This project implements a scalable and modular architecture for CSS (SMACSS) 
 *              using SCSS to ensure maintainable and reusable styles.
 * Author: Chris Javier Oliveros
 * Version: 1.0.1
 * License: MIT
 * 
 * This file serves as the entry point for the SCSS architecture. It organizes and imports 
 * all styles based on the SMACSS methodology.
 */
/**
 * Config Index
 * Forwards all configuration files
 */
/**
 * COLOR CONFIGURATION
 * ------------------
 * 
 * USAGE:
 * 1. Import this file: @import 'config/colors';
 * 
 * 2. Generate CSS variables in your root file:
 *    @include generate-color-variables();
 * 
 * 3. Use colors in your SCSS:
 *    - Function: color: color('primary');      // Returns #c2171c
 *    - Function: border: 1px solid color('primary-300');  // Uses shade variant
 *    - Variable: background: var(--color-primary);  // Use CSS variable
 *    - Opacity: background: color-alpha('primary', 0.5);  // 50% opacity
 * 
 * 4. For theme variations:
 *    .dark-theme { background: var(--color-dark-800); }
 */
/**
 * Function to get color value
 * @param {String} $name - The color name from the $colors map
 * @return {Color} The color value
 * @example color: color('primary');      // Returns #314459
 */
/**
 * Function to get color with opacity
 * @param {String} $name - The color name from the $colors map
 * @param {Number} $alpha - Opacity value between 0 and 1
 * @return {Color} The rgba color value with opacity
 * @example background: color-alpha('primary', 0.5); // Returns rgba(49, 68, 89, 0.5)
 */
/**
 * Generate CSS color variables
 * Creates: --color-X variables
 * @example @include generate-color-variables();
 */
/**
 * TYPOGRAPHY CONFIGURATION
 * -----------------------
 * 
 * USAGE:
 * 1. Import this file: @import 'config/typography';
 * 
 * 2. Generate CSS variables in your root file:
 *    @include generate-typography-variables();
 * 
 * 3. Use typography in your SCSS:
 *    - Font family: font-family: font-family('heading');  // Returns 'Roboto', -apple-system, etc.
 *    - Font weight: font-weight: font-weight('bold');     // Returns 700
 *    - Font size: font-size: font-size(3);               // Returns 1rem (16px)
 *    - Line height: line-height: line-height('tight');    // Returns 1.25
 *    - Letter spacing: letter-spacing: letter-spacing('wide');  // Returns 0.025em
 *    - Variable: font-size: var(--font-size-5);          // Use CSS variable
 * 
 * Font size scale:
 *    1: 0.75rem  (12px) - Small labels, footnotes
 *    2: 0.875rem (14px) - Secondary text
 *    3: 1rem     (16px) - Body text
 *    4: 1.125rem (18px) - Large body text
 *    5: 1.25rem  (20px) - Small headings
 *    6: 1.5rem   (24px) - Medium headings
 *    7: 1.875rem (30px) - Large headings
 *    8: 2.25rem  (36px) - Extra large headings
 *    9: 3rem     (48px) - Display headings
 * 
 * 4. For component patterns:
 *    .heading-1 { 
 *      font-family: font-family('heading');
 *      font-size: font-size(8);
 *      font-weight: font-weight('bold');
 *      line-height: line-height('tight');
 *    }
 */
/**
 * Typography Configuration
 */
/**
 * Function to get font family
 * @param {String} $name - The font family name from the $font-families map
 * @return {List} The list of font family values
 * @example font-family: font-family('heading'); // Returns 'Inter', -apple-system, etc.
 */
/**
 * Function to get font weight
 * @param {String} $name - The font weight name from the $font-weights map
 * @return {Number} The font weight value
 * @example font-weight: font-weight('bold'); // Returns 700
 */
/**
 * Function to get font size
 * @param {String} $name - The font size name from the $font-sizes map
 * @return {Length} The font size value in rem
 * @example font-size: font-size('lg'); // Returns 1.125rem
 */
/**
 * Function to get line height
 * @param {String} $name - The line height name from the $line-heights map
 * @return {Number} The line height value
 * @example line-height: line-height('tight'); // Returns 1.25
 */
/**
 * Function to get letter spacing
 * @param {String} $name - The letter spacing name from the $letter-spacing map
 * @return {Length} The letter spacing value in em
 * @example letter-spacing: letter-spacing('wide'); // Returns 0.025em
 */
/**
 * Generate CSS typography variables
 * Creates: --font-size-X, --line-height-X, --letter-spacing-X, and --font-weight-X variables
 * @example @include generate-typography-variables();
 */
/**
 * SPACING CONFIGURATION
 * ---------------------
 * 
 * USAGE:
 * 1. Import this file: @import 'config/spacing';
 * 
 * 2. Generate CSS variables in your root file:
 *    @include generate-spacing-variables();
 * 
 * 3. Use spacing in your SCSS:
 *    - Function: margin: spacing(4);      // Returns 1rem
 *    - Function: padding: spacing('md');  // Returns 2rem using alias
 *    - Variable: gap: var(--spacing-6);   // Use CSS variable
 * 
 * 4. For container padding:
 *    padding: var(--container-padding-md); // Responsive padding
 */
/**
 * Function to get spacing value
 * @param {String|Number} $key - The spacing key or alias
 * @return {Number} The spacing value in rem
 * @example padding: spacing(4);      // Returns 1rem
 * @example margin: spacing('sm');    // Returns 1rem via alias
 */
/**
 * Generate CSS spacing variables
 * Creates: --spacing-X and --container-padding-X variables
 * @example @include generate-spacing-variables();
 */
/**
 * BREAKPOINTS CONFIGURATION
 * ------------------------
 * 
 * USAGE:
 * 1. Import this file: @import 'config/breakpoints';
 * 
 * 2. Generate CSS variables in your root file:
 *    @include generate-breakpoint-variables();
 * 
 * 3. Use breakpoints in your SCSS:
 *    - Mixin:    @include breakpoint(md) { ... }     // Applies styles at 768px and above
 *    - Function: width: breakpoint(lg);              // Returns 992px
 *    - Variable: @media (min-width: var(--breakpoint-xl)) { ... }  // Use CSS variable
 * 
 * 4. Available breakpoint sizes:
 *    - xs: 375px
 *    - sm: 576px
 *    - md: 768px
 *    - lg: 992px
 *    - xl: 1200px
 *    - xxl: 1400px
 */
/**
 * Button Configuration
 */
/**
 * Global Utility Functions
 */
/**
 * Base Styles
 */
*,
*::before,
*::after {
  box-sizing: border-box;
}

html {
  font-size: 100%;
  -webkit-text-size-adjust: 100%;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

body {
  margin: 0;
  font-family: "Roboto", -apple-system, BlinkMacSystemFont, "Segoe UI", "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  font-size: 1rem;
  line-height: 1.5;
  color: #272727;
  background-color: #ffffff;
  font-optical-sizing: var(--font-optical-sizing);
  font-style: normal;
  font-variation-settings: var(--font-variation-settings);
}

h1,
h2,
h3,
h4,
h5,
h6,
p,
ul,
ol,
dl,
figure {
  margin: 0;
}

ul,
ol {
  padding: 0;
  list-style: none;
}

img {
  max-width: 100%;
  height: auto;
  display: block;
}

a {
  color: #103256;
  text-decoration: none;
}

button {
  background: none;
  border: none;
  padding: 0;
  font: inherit;
  cursor: pointer;
}

:focus-visible {
  outline: 2px solid #103256;
  outline-offset: 2px;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: "Roboto", -apple-system, BlinkMacSystemFont, "Segoe UI", "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  font-weight: 300;
  line-height: 1.25;
  margin-bottom: 1rem;
  font-optical-sizing: var(--font-optical-sizing);
  font-style: normal;
  font-variation-settings: var(--font-variation-settings);
}

h1 {
  font-size: 2.25rem;
}

h2 {
  font-size: 1.875rem;
}

h3 {
  font-size: 1.5rem;
}

h4 {
  font-size: 1.25rem;
}

h5 {
  font-size: 1.125rem;
}

h6 {
  font-size: 1rem;
}

p {
  margin-bottom: 1rem;
}
p:last-child {
  margin-bottom: 0;
}

.lead {
  font-size: 1.25rem;
  line-height: 1.375;
}

a {
  color: #c2171c;
  text-decoration: underline;
  transition: color 0.2s;
}
a:hover {
  color: #df4347;
}

.text-small {
  font-size: 0.875rem;
}

.display-1 {
  font-family: "Roboto", -apple-system, BlinkMacSystemFont, "Segoe UI", "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  font-size: 3rem;
  font-weight: 700;
  line-height: 1;
  letter-spacing: -0.025em;
  font-optical-sizing: var(--font-optical-sizing);
  font-style: normal;
  font-variation-settings: var(--font-variation-settings);
}

.display-2 {
  font-family: "Roboto", -apple-system, BlinkMacSystemFont, "Segoe UI", "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  font-size: 2.25rem;
  font-weight: 700;
  line-height: 1;
  letter-spacing: -0.025em;
  font-optical-sizing: var(--font-optical-sizing);
  font-style: normal;
  font-variation-settings: var(--font-variation-settings);
}

.display-3 {
  font-family: "Roboto", -apple-system, BlinkMacSystemFont, "Segoe UI", "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  font-size: 1.875rem;
  font-weight: 700;
  line-height: 1.25;
  letter-spacing: -0.025em;
  font-optical-sizing: var(--font-optical-sizing);
  font-style: normal;
  font-variation-settings: var(--font-variation-settings);
}

/**
 * Project: SMACSS SCSS Architecture
 * Description: This project implements a scalable and modular architecture for CSS (SMACSS) 
 *              using SCSS to ensure maintainable and reusable styles.
 * Author: Chris Javier Oliveros
 * Version: 1.0.1
 * License: MIT
 * 
 * This file serves as the entry point for the SCSS architecture. It organizes and imports 
 * all styles based on the SMACSS methodology.
 */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: var(--button-default-padding-y) var(--button-default-padding-x);
  border-radius: var(--button-default-border-radius);
  font-family: "Roboto", -apple-system, BlinkMacSystemFont, "Segoe UI", "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  font-weight: var(--button-default-font-weight);
  font-size: var(--button-default-font-size);
  text-align: center;
  cursor: pointer;
  border: 1px solid transparent;
  transition: var(--button-default-transition);
}
.btn:focus-visible {
  outline: 2px solid #c2171c;
  outline-offset: 2px;
}
.btn--sm {
  padding: var(--button-sm-padding-y) var(--button-sm-padding-x);
  font-size: var(--button-sm-font-size);
}
.btn--lg {
  padding: var(--button-lg-padding-y) var(--button-lg-padding-x);
  font-size: var(--button-lg-font-size);
}
.btn--block {
  display: block;
  width: 100%;
}
.btn--primary {
  background-color: #c2171c;
  color: #ffffff;
  border-color: #c2171c;
}
.btn--primary:hover {
  background-color: #1f0909;
  color: #ffffff;
  border-color: #1f0909;
}
.btn--secondary {
  background-color: #103256;
  color: #ffffff;
  border-color: #103256;
}
.btn--secondary:hover {
  background-color: #425c78;
  color: #ffffff;
  border-color: #425c78;
}
.btn--danger {
  background-color: #d81c1c;
  color: #ffffff;
  border-color: #d81c1c;
}
.btn--danger:hover {
  background-color: #e24949;
  color: #ffffff;
  border-color: #e24949;
}
.btn--warning {
  background-color: #f59e0b;
  color: #000000;
  border-color: #f59e0b;
}
.btn--warning:hover {
  background-color: #f7b53b;
  color: #000000;
  border-color: #f7b53b;
}
.btn--success {
  background-color: #0f766e;
  color: #ffffff;
  border-color: #0f766e;
}
.btn--success:hover {
  background-color: #3f948d;
  color: #ffffff;
  border-color: #3f948d;
}
.btn--info {
  background-color: #0369a1;
  color: #ffffff;
  border-color: #0369a1;
}
.btn--info:hover {
  background-color: #358bba;
  color: #ffffff;
  border-color: #358bba;
}

/**
 * Project: SMACSS SCSS Architecture
 * Description: This project implements a scalable and modular architecture for CSS (SMACSS) 
 *              using SCSS to ensure maintainable and reusable styles.
 * Author: Chris Javier Oliveros
 * Version: 1.0.1
 * License: MIT
 * 
 * This file serves as the entry point for the SCSS architecture. It organizes and imports 
 * all styles based on the SMACSS methodology.
 */
:root {
  --color-primary: #c2171c;
  --color-primary-tint: #1f0909;
  --color-primary-shade: #9a1216;
  --color-primary-contrast: #ffffff;
  --color-primary-50: #fbe7e8;
  --color-primary-100: #f7d0d1;
  --color-primary-200: #efa1a3;
  --color-primary-300: #e77275;
  --color-primary-400: #df4347;
  --color-primary-500: #c2171c;
  --color-primary-600: #9c1216;
  --color-primary-700: #750e11;
  --color-primary-800: #4e090b;
  --color-primary-900: #270405;
  --color-primary-950: #140202;
  --color-secondary: #103256;
  --color-secondary-tint: #425c78;
  --color-secondary-shade: #0d2845;
  --color-secondary-contrast: #ffffff;
  --color-secondary-50: #e6ebf0;
  --color-secondary-100: #cdd8e2;
  --color-secondary-200: #9ab0c5;
  --color-secondary-300: #6889a8;
  --color-secondary-400: #3b618a;
  --color-secondary-500: #103256;
  --color-secondary-600: #0d2845;
  --color-secondary-700: #0a1e34;
  --color-secondary-800: #071422;
  --color-secondary-900: #030a11;
  --color-secondary-950: #020508;
  --color-danger: #d81c1c;
  --color-danger-tint: #e24949;
  --color-danger-shade: #ad1616;
  --color-danger-contrast: #ffffff;
  --color-warning: #f59e0b;
  --color-warning-tint: #f7b53b;
  --color-warning-shade: #c47e09;
  --color-warning-contrast: #000000;
  --color-success: #0f766e;
  --color-success-tint: #3f948d;
  --color-success-shade: #0c5e58;
  --color-success-contrast: #ffffff;
  --color-info: #0369a1;
  --color-info-tint: #358bba;
  --color-info-shade: #025480;
  --color-info-contrast: #ffffff;
  --color-light-50: #fefefe;
  --color-light-100: #fafafa;
  --color-light-200: #f5f5f5;
  --color-light-300: #ebebeb;
  --color-light-400: #e0e0e0;
  --color-light-500: #d6d6d6;
  --color-light-600: #cccccc;
  --color-light-700: #c2c2c2;
  --color-light-800: #b8b8b8;
  --color-light-900: #adadad;
  --color-light-950: #a3a3a3;
  --color-dark-50: #ababab;
  --color-dark-100: #a1a1a1;
  --color-dark-200: #8e8e8e;
  --color-dark-300: #7c7c7c;
  --color-dark-400: #6a6a6a;
  --color-dark-500: #585858;
  --color-dark-600: #464646;
  --color-dark-700: #343434;
  --color-dark-800: #222222;
  --color-dark-900: #101010;
  --color-dark-950: #050505;
  --color-black: #272727;
  --color-white: #ffffff;
}

:root {
  --font-optical-sizing: auto;
  --font-variation-settings: "wdth" 100;
  --font-size-1: 0.75rem;
  --font-size-2: 0.875rem;
  --font-size-3: 1rem;
  --font-size-4: 1.125rem;
  --font-size-5: 1.25rem;
  --font-size-6: 1.5rem;
  --font-size-7: 1.875rem;
  --font-size-8: 2.25rem;
  --font-size-9: 3rem;
  --line-height-none: 1;
  --line-height-tight: 1.25;
  --line-height-snug: 1.375;
  --line-height-normal: 1.5;
  --line-height-relaxed: 1.625;
  --line-height-loose: 2;
  --letter-spacing-tight: -0.025em;
  --letter-spacing-normal: 0;
  --letter-spacing-wide: 0.025em;
  --letter-spacing-wider: 0.05em;
  --letter-spacing-widest: 0.1em;
  --font-weight-light: 300;
  --font-weight-regular: 400;
  --font-weight-medium: 500;
  --font-weight-semibold: 600;
  --font-weight-bold: 700;
}

:root {
  --spacing-0: 0;
  --spacing-1: 0.25rem;
  --spacing-2: 0.5rem;
  --spacing-3: 0.75rem;
  --spacing-4: 1rem;
  --spacing-5: 1.5rem;
  --spacing-6: 2rem;
  --spacing-8: 3rem;
  --spacing-10: 4rem;
  --spacing-12: 6rem;
  --spacing-16: 8rem;
  --container-padding-sm: var(--spacing-4);
  --container-padding-md: var(--spacing-6);
  --container-padding-lg: var(--spacing-8);
}

:root {
  --breakpoint-xs: 375px;
  --breakpoint-sm: 576px;
  --breakpoint-md: 768px;
  --breakpoint-lg: 992px;
  --breakpoint-xl: 1200px;
  --breakpoint-xxl: 1400px;
}

:root {
  --button-default-padding-y: var(--space-2);
  --button-default-padding-x: var(--space-4);
  --button-default-border-radius: var(--space-0.375rem);
  --button-default-font-weight: var(--space-medium);
  --button-default-font-size: var(--font-size-base);
  --button-default-transition: var(--space-all 0.2s ease-in-out);
  --button-sm-padding-y: var(--space-1);
  --button-sm-padding-x: var(--space-3);
  --button-sm-font-size: var(--font-size-sm);
  --button-lg-padding-y: var(--space-3);
  --button-lg-padding-x: var(--space-6);
  --button-lg-font-size: var(--font-size-lg);
}

/**
 * Project: SMACSS SCSS Architecture
 * Description: This project implements a scalable and modular architecture for CSS (SMACSS) 
 *              using SCSS to ensure maintainable and reusable styles.
 * Author: Chris Javier Oliveros
 * Version: 1.0.1
 * License: MIT
 * 
 * This file serves as the entry point for the SCSS architecture. It organizes and imports 
 * all styles based on the SMACSS methodology.
 */
/**
 * CONTAINER CONFIGURATION
 * ----------------------
 * 
 * USAGE:
 * 1. Apply the container class to create a responsive, centered wrapper:
 *    <div class="container">Content goes here</div>
 * 
 * 2. Container variations:
 *    - Default: <div class="container">...</div> (max-width: 1200px)
 *    - Narrow: <div class="container container--narrow">...</div> (max-width: 800px)
 *    - Wide: <div class="container container--wide">...</div> (max-width: 1600px)
 *    - Fluid: <div class="container container--fluid">...</div> (max-width: 100%)
 * 
 * 3. Container padding is responsive and handled by CSS variables:
 *    - Large screens: var(--container-padding-lg)
 *    - Medium screens: var(--container-padding-md)
 *    - Small screens: var(--container-padding-sm)
 */
.container {
  width: 100%;
  max-width: 1200px;
  margin-left: auto;
  margin-right: auto;
  padding-left: var(--container-padding-lg);
  padding-right: var(--container-padding-lg);
}
@media (min-width: 992px) {
  .container {
    padding-left: var(--container-padding-md);
    padding-right: var(--container-padding-md);
  }
}
@media (min-width: 768px) {
  .container {
    padding-left: var(--container-padding-sm);
    padding-right: var(--container-padding-sm);
  }
}
.container--narrow {
  max-width: 800px;
}
.container--wide {
  max-width: 1600px;
}
.container--fluid {
  max-width: 100%;
}

/**
 * Project: SMACSS SCSS Architecture
 * Description: This project implements a scalable and modular architecture for CSS (SMACSS) 
 *              using SCSS to ensure maintainable and reusable styles.
 * Author: Chris Javier Oliveros
 * Version: 1.0.1
 * License: MIT
 * 
 * This file serves as the entry point for the SCSS architecture. It organizes and imports 
 * all styles based on the SMACSS methodology.
 */
/**
 * GRID LAYOUT CONFIGURATION
 * -----------------------
 * 
 * USAGE:
 * 1. Apply the grid class to create a responsive grid layout:
 *    <div class="grid">
 *      <div>Item 1</div>
 *      <div>Item 2</div>
 *    </div>
 * 
 * 2. Column variations (responsive):
 *    - Two columns: <div class="grid grid--2-col">...</div>
 *      Mobile: 1 column, Tablet/Desktop: 2 columns
 *    
 *    - Three columns: <div class="grid grid--3-col">...</div>
 *      Mobile: 1 column, Tablet: 2 columns, Desktop: 3 columns
 *    
 *    - Four columns: <div class="grid grid--4-col">...</div>
 *      Mobile: 1 column, Tablet: 2 columns, Desktop: 4 columns
 * 
 * 3. Gap variations:
 *    - Default: <div class="grid">...</div> (gap: spacing("4"))
 *    - Small: <div class="grid grid--gap-sm">...</div> (gap: spacing("2"))
 *    - Large: <div class="grid grid--gap-lg">...</div> (gap: spacing("8"))
 * 
 * 4. Auto-fit grid (for card layouts):
 *    <div class="grid grid--auto-fit">...</div>
 *    Creates a responsive grid that automatically fits columns based on available space
 */
.grid {
  display: grid;
  gap: 1rem;
}
.grid--gap-sm {
  gap: 0.5rem;
}
.grid--gap-lg {
  gap: 3rem;
}
.grid--2-col {
  grid-template-columns: 1fr;
}
@media (min-width: 768px) {
  .grid--2-col {
    grid-template-columns: repeat(2, 1fr);
  }
}
.grid--3-col {
  grid-template-columns: 1fr;
}
@media (min-width: 768px) {
  .grid--3-col {
    grid-template-columns: repeat(2, 1fr);
  }
}
@media (min-width: 992px) {
  .grid--3-col {
    grid-template-columns: repeat(3, 1fr);
  }
}
.grid--4-col {
  grid-template-columns: 1fr;
}
@media (min-width: 768px) {
  .grid--4-col {
    grid-template-columns: repeat(2, 1fr);
  }
}
@media (min-width: 992px) {
  .grid--4-col {
    grid-template-columns: repeat(4, 1fr);
  }
}
.grid--auto-fit {
  grid-template-columns: repeat(auto-fit, minmax(min(100%, 18rem), 1fr));
}

.site-navigation {
  width: 100%;
}
.site-navigation .nav-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 1rem 0;
}
.site-navigation .nav-logo {
  z-index: 2;
}
.site-navigation .nav-logo img {
  max-height: 50px;
  width: auto;
}
.site-navigation .mobile-nav-toggle {
  display: none;
  z-index: 2;
  cursor: pointer;
  padding: 0.5rem;
  background: none;
  border: none;
}
@media (min-width: 768px) {
  .site-navigation .mobile-nav-toggle {
    display: block;
  }
}
.site-navigation .mobile-nav-toggle .menu-toggle-icon {
  display: block;
  width: 24px;
  height: 2px;
  background-color: #103256;
  position: relative;
  transition: all 0.3s ease;
}
.site-navigation .mobile-nav-toggle .menu-toggle-icon::before, .site-navigation .mobile-nav-toggle .menu-toggle-icon::after {
  content: "";
  position: absolute;
  width: 100%;
  height: 100%;
  background-color: #103256;
  transition: all 0.3s ease;
}
.site-navigation .mobile-nav-toggle .menu-toggle-icon::before {
  transform: translateY(-8px);
}
.site-navigation .mobile-nav-toggle .menu-toggle-icon::after {
  transform: translateY(8px);
}
.site-navigation .mobile-nav-toggle[aria-expanded=true] .menu-toggle-icon {
  background-color: transparent;
}
.site-navigation .mobile-nav-toggle[aria-expanded=true] .menu-toggle-icon::before {
  transform: rotate(45deg);
}
.site-navigation .mobile-nav-toggle[aria-expanded=true] .menu-toggle-icon::after {
  transform: rotate(-45deg);
}
@media (min-width: 768px) {
  .site-navigation .nav-menu-wrapper {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh;
    background-color: #ffffff;
    padding: 4rem 1rem 1rem;
    transform: translateX(-100%);
    transition: transform 0.3s ease;
    z-index: 1;
    overflow-y: auto;
  }
  .site-navigation .nav-menu-wrapper.active {
    transform: translateX(0);
  }
}
.site-navigation .main-menu {
  list-style: none;
  margin: 0;
  padding: 0;
}
@media (min-width: 768px) {
  .site-navigation .main-menu {
    display: flex;
    align-items: center;
    gap: 2rem;
  }
}
@media (min-width: 768px) {
  .site-navigation .main-menu {
    text-align: center;
  }
}
.site-navigation .main-menu > li {
  position: relative;
}
@media (min-width: 768px) {
  .site-navigation .main-menu > li {
    margin-bottom: 1rem;
  }
}
.site-navigation .main-menu > li > a {
  color: #103256;
  text-decoration: none;
  font-weight: 500;
  transition: color 0.2s ease;
}
.site-navigation .main-menu > li > a:hover {
  color: #c2171c;
}
.site-navigation .main-menu .sub-menu {
  list-style: none;
  margin: 0;
  padding: 0.5rem 0;
}
@media (min-width: 768px) {
  .site-navigation .main-menu .sub-menu {
    position: absolute;
    top: 100%;
    left: 0;
    min-width: 200px;
    background-color: #ffffff;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    opacity: 0;
    visibility: hidden;
    transform: translateY(10px);
    transition: all 0.2s ease;
  }
}
@media (min-width: 768px) {
  .site-navigation .main-menu .sub-menu li {
    padding: 0.5rem 1rem;
  }
}
@media (min-width: 768px) {
  .site-navigation .main-menu .sub-menu li {
    margin-bottom: 0.5rem;
  }
}
.site-navigation .main-menu .sub-menu a {
  color: #103256;
  text-decoration: none;
  display: block;
  transition: color 0.2s ease;
}
.site-navigation .main-menu .sub-menu a:hover {
  color: #c2171c;
}
@media (min-width: 768px) {
  .site-navigation .main-menu li:hover > .sub-menu,
  .site-navigation .main-menu li:focus-within > .sub-menu {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }
}
@media (min-width: 768px) {
  .site-navigation .main-menu .menu-item-has-children.sub-menu-active > .sub-menu {
    display: block;
  }
  .site-navigation .main-menu .menu-item-has-children > .sub-menu {
    display: none;
  }
}

.screen-reader-text {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/**
 * Project: SMACSS SCSS Architecture
 * Description: This project implements a scalable and modular architecture for CSS (SMACSS) 
 *              using SCSS to ensure maintainable and reusable styles.
 * Author: Chris Javier Oliveros
 * Version: 1.0.1
 * License: MIT
 * 
 * This file serves as the entry point for the SCSS architecture. It organizes and imports 
 * all styles based on the SMACSS methodology.
 */
.flex-row {
  flex-direction: row !important;
}

.flex-column {
  flex-direction: column !important;
}

.justify-center {
  justify-content: center !important;
}

.align-center {
  align-items: center !important;
}

.d-none {
  display: none !important;
}

.d-block {
  display: block !important;
}

.d-flex {
  display: flex !important;
}

.text-center {
  text-align: center !important;
}

.text-left {
  text-align: left !important;
}

.text-right {
  text-align: right !important;
}

/**
 * Project: SMACSS SCSS Architecture
 * Description: This project implements a scalable and modular architecture for CSS (SMACSS) 
 *              using SCSS to ensure maintainable and reusable styles.
 * Author: Chris Javier Oliveros
 * Version: 1.0.1
 * License: MIT
 * 
 * This file serves as the entry point for the SCSS architecture. It organizes and imports 
 * all styles based on the SMACSS methodology.
 */
.m-0 {
  margin: 0 !important;
}

.mt-0 {
  margin-top: 0 !important;
}

.mb-0 {
  margin-bottom: 0 !important;
}

.m-1 {
  margin: 0.25rem !important;
}

.mt-1 {
  margin-top: 0.25rem !important;
}

.mb-1 {
  margin-bottom: 0.25rem !important;
}

.m-2 {
  margin: 0.5rem !important;
}

.mt-2 {
  margin-top: 0.5rem !important;
}

.mb-2 {
  margin-bottom: 0.5rem !important;
}

.m-3 {
  margin: 0.75rem !important;
}

.mt-3 {
  margin-top: 0.75rem !important;
}

.mb-3 {
  margin-bottom: 0.75rem !important;
}

.m-4 {
  margin: 1rem !important;
}

.mt-4 {
  margin-top: 1rem !important;
}

.mb-4 {
  margin-bottom: 1rem !important;
}

.m-5 {
  margin: 1.5rem !important;
}

.mt-5 {
  margin-top: 1.5rem !important;
}

.mb-5 {
  margin-bottom: 1.5rem !important;
}

.m-6 {
  margin: 2rem !important;
}

.mt-6 {
  margin-top: 2rem !important;
}

.mb-6 {
  margin-bottom: 2rem !important;
}

.m-8 {
  margin: 3rem !important;
}

.mt-8 {
  margin-top: 3rem !important;
}

.mb-8 {
  margin-bottom: 3rem !important;
}

.m-10 {
  margin: 4rem !important;
}

.mt-10 {
  margin-top: 4rem !important;
}

.mb-10 {
  margin-bottom: 4rem !important;
}

.m-12 {
  margin: 6rem !important;
}

.mt-12 {
  margin-top: 6rem !important;
}

.mb-12 {
  margin-bottom: 6rem !important;
}

.m-16 {
  margin: 8rem !important;
}

.mt-16 {
  margin-top: 8rem !important;
}

.mb-16 {
  margin-bottom: 8rem !important;
}

/**
 * Project: SMACSS SCSS Architecture
 * Description: This project implements a scalable and modular architecture for CSS (SMACSS) 
 *              using SCSS to ensure maintainable and reusable styles.
 * Author: Chris Javier Oliveros
 * Version: 1.0.1
 * License: MIT
 * 
 * This file serves as the entry point for the SCSS architecture. It organizes and imports 
 * all styles based on the SMACSS methodology.
 */
.p-0 {
  padding: 0 !important;
}

.pt-0 {
  padding-top: 0 !important;
}

.pb-0 {
  padding-bottom: 0 !important;
}

.p-1 {
  padding: 0.25rem !important;
}

.pt-1 {
  padding-top: 0.25rem !important;
}

.pb-1 {
  padding-bottom: 0.25rem !important;
}

.p-2 {
  padding: 0.5rem !important;
}

.pt-2 {
  padding-top: 0.5rem !important;
}

.pb-2 {
  padding-bottom: 0.5rem !important;
}

.p-3 {
  padding: 0.75rem !important;
}

.pt-3 {
  padding-top: 0.75rem !important;
}

.pb-3 {
  padding-bottom: 0.75rem !important;
}

.p-4 {
  padding: 1rem !important;
}

.pt-4 {
  padding-top: 1rem !important;
}

.pb-4 {
  padding-bottom: 1rem !important;
}

.p-5 {
  padding: 1.5rem !important;
}

.pt-5 {
  padding-top: 1.5rem !important;
}

.pb-5 {
  padding-bottom: 1.5rem !important;
}

.p-6 {
  padding: 2rem !important;
}

.pt-6 {
  padding-top: 2rem !important;
}

.pb-6 {
  padding-bottom: 2rem !important;
}

.p-8 {
  padding: 3rem !important;
}

.pt-8 {
  padding-top: 3rem !important;
}

.pb-8 {
  padding-bottom: 3rem !important;
}

.p-10 {
  padding: 4rem !important;
}

.pt-10 {
  padding-top: 4rem !important;
}

.pb-10 {
  padding-bottom: 4rem !important;
}

.p-12 {
  padding: 6rem !important;
}

.pt-12 {
  padding-top: 6rem !important;
}

.pb-12 {
  padding-bottom: 6rem !important;
}

.p-16 {
  padding: 8rem !important;
}

.pt-16 {
  padding-top: 8rem !important;
}

.pb-16 {
  padding-bottom: 8rem !important;
}