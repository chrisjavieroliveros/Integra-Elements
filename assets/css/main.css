/**
 * Project: SMACSS SCSS Architecture
 * Description: This project implements a scalable and modular architecture for CSS (SMACSS) 
 *              using SCSS to ensure maintainable and reusable styles.
 * Author: Chris Javier Oliveros
 * Version: 2.0.0
 * License: MIT
 * 
 * This file serves as the entry point for the SCSS architecture. It organizes and imports 
 * all styles based on the SMACSS methodology.
 * 
 * NOTE: This compiles to main.css and should be used alongside config.css
 * (compiled from config.scss) which contains all CSS custom properties.
 */
/**
 * UTILITIES INDEX
 * ===============
 * This file forwards all mixins, functions, and utility classes.
 */
/**
 * BREAKPOINTS
 * -----------
 * Simple responsive breakpoint system with mobile-first approach.
 */
/**
 * Get breakpoint value
 * @param {String} $name - The breakpoint name
 * @return {Number} The breakpoint value in pixels
 * @example width: breakpoint('md'); // Returns 768px
 */
/**
 * Apply styles at a breakpoint and up (mobile-first)
 * @param {String} $size - Breakpoint size name
 * @example @include breakpoint('md') { display: flex; }
 */
/**
 * Apply styles below a breakpoint (max-width)
 * @param {String} $size - Breakpoint size name
 * @example @include breakpoint-down('md') { display: block; }
 */
/**
 * TEXT UTILITY MIXINS
 * -------------------
 * 
 * Mixins for text manipulation and display utilities
 * 
 * USAGE:
 * @use "../mixins/text" as text;
 * @include text.truncate-text;
 * @include text.truncate-multiline(3);
 */
/**
 * Truncate text with ellipsis
 * @example @include truncate-text;
 */
/**
 * Multi-line text truncation
 * @param {Number} $lines - Number of lines to show
 * @example @include truncate-multiline(3);
 */
.text-center {
  text-align: center !important;
}

.text-left {
  text-align: left !important;
}

.text-right {
  text-align: right !important;
}

/**
 * Base Styles
 */
/**
 * MODERN CSS RESET
 * ================
 * 
 * A comprehensive CSS reset based on modern best practices including:
 * - Josh Comeau's CSS Reset
 * - Andy Bell's Modern CSS Reset
 * - Normalize.css principles
 * - Accessibility improvements
 * 
 * Updated: 2024
 */
/* Box sizing rules */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Prevent font size inflation */
html {
  -moz-text-size-adjust: none;
  -webkit-text-size-adjust: none;
  text-size-adjust: none;
  font-size: 100%;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeSpeed;
}

/* Remove default margin in favour of better control in authored CSS */
body,
h1,
h2,
h3,
h4,
h5,
h6,
p,
figure,
blockquote,
dl,
dd {
  margin: 0;
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */
ul[role=list],
ol[role=list] {
  list-style: none;
}

/* Remove default list styles */
ul,
ol {
  margin: 0;
  padding: 0;
  list-style: none;
}

/* Set core body defaults */
body {
  min-height: 100vh;
  line-height: var(--line-height-normal, 1.5);
  font-family: var(--font-family-base, system-ui, sans-serif);
  font-size: var(--font-size-base, 1rem);
  color: var(--color-black, #000);
  background-color: var(--color-white, #fff);
  margin: 0;
  padding: 0;
}

/* Set shorter line heights on headings and interactive elements */
h1,
h2,
h3,
h4,
h5,
h6,
button,
input,
label {
  line-height: 1.1;
}

/* Balance text wrapping on headings */
h1,
h2,
h3,
h4,
h5,
h6 {
  text-wrap: balance;
}

/* A elements that don't have a class get default styles */
a:not([class]) {
  -webkit-text-decoration-skip: ink;
          text-decoration-skip-ink: auto;
  color: currentColor;
}

/* Make images easier to work with */
img,
picture,
video,
canvas,
svg {
  max-width: 100%;
  height: auto;
  display: block;
}

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
  font: inherit;
  color: inherit;
}

/* Remove default button styles */
button {
  background: none;
  border: none;
  padding: 0;
  cursor: pointer;
}

/* Make sure textareas without a rows attribute are not tiny */
textarea:not([rows]) {
  min-height: 10em;
}

/* Anything that has been anchored to should have extra scroll margin */
:target {
  scroll-margin-block: 5ex;
}

/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
  html:focus-within {
    scroll-behavior: auto;
  }
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
/* Focus styles */
:focus-visible {
  outline: 2px solid var(--color-secondary, #2a8de9);
  outline-offset: 2px;
}

/* Remove focus outline for mouse users */
:focus:not(:focus-visible) {
  outline: none;
}

/* Improve table styling */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* Form elements */
fieldset {
  margin: 0;
  padding: 0;
  border: none;
}

legend {
  padding: 0;
}

/* Remove default styling from form elements */
input[type=search] {
  -webkit-appearance: textfield;
  outline-offset: -2px;
}

input[type=search]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/* Fix webkit button styling */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  font: inherit;
}

/* Improve consistency of default fonts */
code,
kbd,
samp,
pre {
  font-family: ui-monospace, "Cascadia Code", "Source Code Pro", Menlo, Consolas, "DejaVu Sans Mono", monospace;
  font-size: 1em;
}

/* Add the correct font size in all browsers */
small {
  font-size: 80%;
}

/* Prevent sub and sup elements from affecting the line height */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Remove the border on images inside links in IE 10 */
img {
  border-style: none;
}

/* Hide the overflow in IE */
svg:not(:root) {
  overflow: hidden;
}

/* Correct the inheritance and scaling of font size in all browsers */
pre {
  font-family: monospace, monospace;
  font-size: 1em;
  overflow: auto;
}

/* Add the correct display in IE 10 */
[hidden] {
  display: none;
}

/* Accessibility improvements */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: var(--font-family-heading);
  font-weight: var(--font-weight-bold);
  line-height: var(--line-height-tight);
  margin-bottom: var(--spacing-4);
}

h1 {
  font-size: var(--font-size-4xl);
}

h2 {
  font-size: var(--font-size-3xl);
}

h3 {
  font-size: var(--font-size-2xl);
}

h4 {
  font-size: var(--font-size-xl);
}

h5 {
  font-size: var(--font-size-lg);
}

h6 {
  font-size: var(--font-size-base);
}

p {
  margin-bottom: var(--spacing-4);
}
p:last-child {
  margin-bottom: 0;
}

.lead {
  font-size: var(--font-size-xl);
  line-height: var(--line-height-snug);
}

a {
  color: var(--color-primary);
  text-decoration: underline;
  transition: color 0.2s;
}
a:hover {
  color: var(--color-primary-400);
}

.text-small {
  font-size: var(--font-size-sm);
}

.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: var(--button-default-padding-y) var(--button-default-padding-x);
  border-radius: var(--button-default-border-radius);
  font-family: var(--font-family-base);
  font-weight: var(--button-default-font-weight);
  font-size: var(--button-default-font-size);
  text-align: center;
  cursor: pointer;
  border: 1px solid transparent;
  transition: var(--button-default-transition);
}
.btn:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}
.btn--sm {
  padding: var(--button-sm-padding-y) var(--button-sm-padding-x);
  font-size: var(--button-sm-font-size);
}
.btn--lg {
  padding: var(--button-lg-padding-y) var(--button-lg-padding-x);
  font-size: var(--button-lg-font-size);
}
.btn--block {
  display: block;
  width: 100%;
}
.btn--primary {
  background-color: var(--color-primary);
  color: var(--color-primary-contrast);
  border-color: var(--color-primary);
}
.btn--primary:hover {
  background-color: var(--color-primary-tint);
  color: var(--color-primary-contrast);
  border-color: var(--color-primary-tint);
}
.btn--secondary {
  background-color: var(--color-secondary);
  color: var(--color-secondary-contrast);
  border-color: var(--color-secondary);
}
.btn--secondary:hover {
  background-color: var(--color-secondary-tint);
  color: var(--color-secondary-contrast);
  border-color: var(--color-secondary-tint);
}
.btn--danger {
  background-color: var(--color-danger);
  color: var(--color-danger-contrast);
  border-color: var(--color-danger);
}
.btn--danger:hover {
  background-color: var(--color-danger-tint);
  color: var(--color-danger-contrast);
  border-color: var(--color-danger-tint);
}
.btn--warning {
  background-color: var(--color-warning);
  color: var(--color-warning-contrast);
  border-color: var(--color-warning);
}
.btn--warning:hover {
  background-color: var(--color-warning-tint);
  color: var(--color-warning-contrast);
  border-color: var(--color-warning-tint);
}
.btn--success {
  background-color: var(--color-success);
  color: var(--color-success-contrast);
  border-color: var(--color-success);
}
.btn--success:hover {
  background-color: var(--color-success-tint);
  color: var(--color-success-contrast);
  border-color: var(--color-success-tint);
}
.btn--info {
  background-color: var(--color-info);
  color: var(--color-info-contrast);
  border-color: var(--color-info);
}
.btn--info:hover {
  background-color: var(--color-info-tint);
  color: var(--color-info-contrast);
  border-color: var(--color-info-tint);
}

/**
 * CONTAINER CONFIGURATION
 * ----------------------
 * 
 * Mobile-first responsive container implementation
 * 
 * USAGE:
 * 1. Apply the container class to create a responsive, centered wrapper:
 *    <div class="container">Content goes here</div>
 * 
 * 2. Container variations:
 *    - Default: <div class="container">...</div> (max-width: 1200px)
 *    - Narrow: <div class="container container--narrow">...</div> (max-width: 800px)
 *    - Wide: <div class="container container--wide">...</div> (max-width: 1600px)
 *    - Fluid: <div class="container container--fluid">...</div> (max-width: 100%)
 * 
 * 3. Container padding is responsive and handled by CSS variables:
 *    - Mobile: var(--container-padding-sm)
 *    - Tablet: var(--container-padding-md)
 *    - Desktop: var(--container-padding-lg)
 */
.container {
  width: 100%;
  max-width: 1200px;
  margin-left: auto;
  margin-right: auto;
  padding-left: var(--spacing-4);
  padding-right: var(--spacing-4);
  outline: 1px solid red;
}
@media (min-width: 768px) {
  .container {
    padding-left: var(--spacing-6);
    padding-right: var(--spacing-6);
    outline: 1px solid blue;
  }
}
@media (min-width: 992px) {
  .container {
    padding-left: var(--spacing-8);
    padding-right: var(--spacing-8);
    outline: 1px solid green;
  }
}
.container--narrow {
  max-width: 800px;
}
.container--wide {
  max-width: 1600px;
}
.container--fluid {
  max-width: 100%;
}

/**
 * GRID LAYOUT CONFIGURATION
 * -----------------------
 * 
 * Mobile-first responsive grid layout implementation
 * 
 * USAGE:
 * 1. Apply the grid class to create a responsive grid layout:
 *    <div class="grid">
 *      <div>Item 1</div>
 *      <div>Item 2</div>
 *    </div>
 * 
 * 2. Column variations (mobile-first responsive):
 *    - Two columns: <div class="grid grid--2-col">...</div>
 *      Mobile: 1 column, Tablet/Desktop: 2 columns
 *    
 *    - Three columns: <div class="grid grid--3-col">...</div>
 *      Mobile: 1 column, Tablet: 2 columns, Desktop: 3 columns
 *    
 *    - Four columns: <div class="grid grid--4-col">...</div>
 *      Mobile: 1 column, Tablet: 2 columns, Desktop: 4 columns
 * 
 * 3. Gap variations:
 *    - Default: <div class="grid">...</div> (gap: spacing("4"))
 *    - Small: <div class="grid grid--gap-sm">...</div> (gap: spacing("2"))
 *    - Large: <div class="grid grid--gap-lg">...</div> (gap: spacing("8"))
 * 
 * 4. Auto-fit grid (for card layouts):
 *    <div class="grid grid--auto-fit">...</div>
 *    Creates a responsive grid that automatically fits columns based on available space
 */
.grid {
  display: grid;
  gap: var(--spacing-4);
}
.grid--gap-sm {
  gap: var(--spacing-2);
}
.grid--gap-lg {
  gap: var(--spacing-8);
}
.grid--2-col {
  grid-template-columns: 1fr;
}
@media (min-width: 768px) {
  .grid--2-col {
    grid-template-columns: repeat(2, 1fr);
  }
}
.grid--3-col {
  grid-template-columns: 1fr;
}
@media (min-width: 768px) {
  .grid--3-col {
    grid-template-columns: repeat(2, 1fr);
  }
}
@media (min-width: 992px) {
  .grid--3-col {
    grid-template-columns: repeat(3, 1fr);
  }
}
.grid--4-col {
  grid-template-columns: 1fr;
}
@media (min-width: 576px) {
  .grid--4-col {
    grid-template-columns: repeat(2, 1fr);
  }
}
@media (min-width: 992px) {
  .grid--4-col {
    grid-template-columns: repeat(4, 1fr);
  }
}
.grid--auto-fit {
  grid-template-columns: 1fr;
}
@media (min-width: 576px) {
  .grid--auto-fit {
    grid-template-columns: repeat(auto-fit, minmax(min(100%, 18rem), 1fr));
  }
}