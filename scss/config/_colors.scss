@use "sass:math";

/**
 * COLOR CONFIGURATION
 * ------------------
 * This file contains only color maps and utility functions.
 * CSS custom properties are generated in config/config.scss
 */

// Color palette
$colors: (
  // Primary Color Semantic
  "Primary": #C33329,
  "Primary-Tint": #d05c55,
  "Primary-Shade": #9a2820,
  "Primary-Contrast": #ffffff,

  // Primary Color Variants
  "Primary-50": #fdebed,
  "Primary-100": #fad6d9,
  "Primary-200": #f3c2c4,
  "Primary-300": #ecadae,
  "Primary-400": #e59997,
  "Primary-500": #C33329,
  "Primary-600": #af2d24,
  "Primary-700": #9a2820,
  "Primary-800": #711d17,
  "Primary-900": #47110e,
  "Primary-950": #1e0705,

  // Secondary Color Semantic
  "Secondary": #222d3f,
  "Secondary-Tint": #424c58,
  "Secondary-Shade": #24272e,
  "Secondary-Contrast": #ffffff,

  // Secondary Color Variants
  "Secondary-50": #f8f9fa,
  "Secondary-100": #e9ecef,
  "Secondary-200": #dee2e6,
  // Slate Blue Gray;
  "Secondary-300": #ced4da,
  "Secondary-400": #424c58,
  "Secondary-500": #222d3f,
  "Secondary-600": #1e2738,
  "Secondary-700": #1a2130,
  // Graphite Gray;
  "Secondary-800": #24272e,
  "Secondary-900": #191d26,
  "Secondary-950": #0f131a,

  // Tertiary Color Semantic
  "Tertiary": #F5A623,
  "Tertiary-Tint": #f7bd4f,
  "Tertiary-Shade": #d4891c,
  "Tertiary-Contrast": #000000,

  // Tertiary Color Variants
  "Tertiary-50": #fefcf3,
  "Tertiary-100": #fef7e0,
  "Tertiary-200": #fdecc4,
  "Tertiary-300": #fbdc9c,
  "Tertiary-400": #f8c572,
  "Tertiary-500": #F5A623,
  "Tertiary-600": #e6941a,
  "Tertiary-700": #d4891c,
  "Tertiary-800": #b8721a,
  "Tertiary-900": #965d1c,
  "Tertiary-950": #523209,

  // State Color: Danger Semantic
  "Danger": #B91C1C,
  "Danger-Tint": #DC2626,
  "Danger-Shade": #991B1B,
  "Danger-Contrast": #ffffff,

  // State Color: Warning Semantic
  "Warning": #EA580C,
  "Warning-Tint": #FB923C,
  "Warning-Shade": #C2410C,
  "Warning-Contrast": #ffffff,

  // State Color: Success Semantic
  "Success": #047857,
  "Success-Tint": #059669,
  "Success-Shade": #065F46,
  "Success-Contrast": #ffffff,

  // State Color: Info Semantic
  "Info": #0369A1,
  "Info-Tint": #0284C7,
  "Info-Shade": #1E40AF,
  "Info-Contrast": #ffffff,

  // Neutral Color: Light
  "Light-100": #f8f9fa,
  "Light-200": #f1f3f4,
  "Light-300": #e6e9ed,
  "Light-400": #dee2e6,
  "Light-500": #d1d5db,
  "Light-600": #c1c7cd,
  "Light-700": #b1b7bd,
  "Light-800": #a1a7ad,
  "Light-900": #9ca3af,

  // Neutral Color: Dark
  "Dark-100": #8b9299,
  "Dark-200": #7a8188,
  "Dark-300": #6b7280,
  "Dark-400": #5d646f,
  "Dark-500": #424c58,
  "Dark-600": #374151,
  "Dark-700": #2d3748,
  "Dark-800": #24272e,
  "Dark-900": #1e1e1e,

  // Base Colors;
  "Black": #272727,
  "White": #ffffff
);

/**
 * Function to get color value
 * @param {String} $name - The color name from the $colors map
 * @return {Color} The color value
 * @example color: getColor('Primary');      // Returns #C33329
 */
@function getColor($name) {
  @if map-has-key($colors, $name) {
    @return map-get($colors, $name);
  }

  @error "Color '#{$name}' not found in color map.";
  @return null;
}

/**
 * Function to get color with opacity
 * @param {String} $name - The color name from the $colors map
 * @param {Number} $alpha - Opacity value between 0 and 1
 * @return {Color} The rgba color value with opacity
 * @example background: color-alpha('Primary', 0.5); // Returns rgba(195, 51, 41, 0.5)
 */
@function color-alpha($name, $alpha) {
  $color: getColor($name);
  @return rgba($color, $alpha);
}