/**
 * COLOR CONFIGURATION
 * ------------------
 * 
 * USAGE:
 * 1. Import this file: @import 'config/colors';
 * 
 * 2. Generate CSS variables in your root file:
 *    @include generate-color-variables();
 * 
 * 3. Use colors in your SCSS:
 *    - Function: color: color('primary');      // Returns #c2171c
 *    - Function: border: 1px solid color('primary-300');  // Uses shade variant
 *    - Variable: background: var(--color-primary);  // Use CSS variable
 *    - Opacity: background: color-alpha('primary', 0.5);  // 50% opacity
 * 
 * 4. For theme variations:
 *    .dark-theme { background: var(--color-dark-800); }
 */

// Color palette
$colors: (
  "primary": #c2171c,
  "primary-tint": #ce4549,
  "primary-shade": #9a1216,
  "primary-contrast": #ffffff,
  "primary-50": #fbe7e8,
  "primary-100": #f7d0d1,
  "primary-200": #efa1a3,
  "primary-300": #e77275,
  "primary-400": #df4347,
  "primary-500": #c2171c,
  "primary-600": #9c1216,
  "primary-700": #750e11,
  "primary-800": #4e090b,
  "primary-900": #270405,
  "primary-950": #140202,

  "secondary": #103256,
  "secondary-tint": #425c78,
  "secondary-shade": #0d2845,
  "secondary-contrast": #ffffff,
  "secondary-50": #e6ebf0,
  "secondary-100": #cdd8e2,
  "secondary-200": #9ab0c5,
  "secondary-300": #6889a8,
  "secondary-400": #3b618a,
  "secondary-500": #103256,
  "secondary-600": #0d2845,
  "secondary-700": #0a1e34,
  "secondary-800": #071422,
  "secondary-900": #030a11,
  "secondary-950": #020508,

  "danger": #d81c1c,
  "danger-tint": #e24949,
  "danger-shade": #ad1616,
  "danger-contrast": #ffffff,

  "warning": #f59e0b,
  "warning-tint": #f7b53b,
  "warning-shade": #c47e09,
  "warning-contrast": #000000,

  "success": #0f766e,
  "success-tint": #3f948d,
  "success-shade": #0c5e58,
  "success-contrast": #ffffff,

  "info": #0369a1,
  "info-tint": #358bba,
  "info-shade": #025480,
  "info-contrast": #ffffff,

  "light-50": #fefefe,
  "light-100": #fafafa,
  "light-200": #f5f5f5,
  "light-300": #ebebeb,
  "light-400": #e0e0e0,
  "light-500": #d6d6d6,
  "light-600": #cccccc,
  "light-700": #c2c2c2,
  "light-800": #b8b8b8,
  "light-900": #adadad,
  "light-950": #a3a3a3,

  "dark-50": #ababab,
  "dark-100": #a1a1a1,
  "dark-200": #8e8e8e,
  "dark-300": #7c7c7c,
  "dark-400": #6a6a6a,
  "dark-500": #585858,
  "dark-600": #464646,
  "dark-700": #343434,
  "dark-800": #222222,
  "dark-900": #101010,
  "dark-950": #050505,

  "black": #272727,
  "white": #ffffff,
);

/**
 * Function to get color value
 * @param {String} $name - The color name from the $colors map
 * @return {Color} The color value
 * @example color: color('primary');      // Returns #314459
 */
@function color($name) {
  @if map-has-key($colors, $name) {
    @return map-get($colors, $name);
  }
  @error "Color '#{$name}' not found in color map.";
  @return null;
}

/**
 * Function to get color with opacity
 * @param {String} $name - The color name from the $colors map
 * @param {Number} $alpha - Opacity value between 0 and 1
 * @return {Color} The rgba color value with opacity
 * @example background: color-alpha('primary', 0.5); // Returns rgba(49, 68, 89, 0.5)
 */
@function color-alpha($name, $alpha) {
  $color: color($name);
  @return rgba($color, $alpha);
}

/**
 * Generate CSS color variables
 * Creates: --color-X variables
 * @example @include generate-color-variables();
 */
@mixin generate-color-variables() {
  :root {
    @each $name, $value in $colors {
      --color-#{$name}: #{$value};
    }
  }
}
