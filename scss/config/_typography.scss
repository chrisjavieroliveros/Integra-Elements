/**
 * TYPOGRAPHY CONFIGURATION
 * -----------------------
 * 
 * USAGE:
 * 1. Import this file: @import 'config/typography';
 * 
 * 2. Generate CSS variables in your root file:
 *    @include generate-typography-variables();
 * 
 * 3. Use typography in your SCSS:
 *    - Font family: font-family: font-family('heading');  // Returns 'Roboto', -apple-system, etc.
 *    - Font weight: font-weight: font-weight('bold');     // Returns 700
 *    - Font size: font-size: font-size(3);               // Returns 1rem (16px)
 *    - Line height: line-height: line-height('tight');    // Returns 1.25
 *    - Letter spacing: letter-spacing: letter-spacing('wide');  // Returns 0.025em
 *    - Variable: font-size: var(--font-size-5);          // Use CSS variable
 * 
 * Font size scale:
 *    1: 0.75rem  (12px) - Small labels, footnotes
 *    2: 0.875rem (14px) - Secondary text
 *    3: 1rem     (16px) - Body text
 *    4: 1.125rem (18px) - Large body text
 *    5: 1.25rem  (20px) - Small headings
 *    6: 1.5rem   (24px) - Medium headings
 *    7: 1.875rem (30px) - Large headings
 *    8: 2.25rem  (36px) - Extra large headings
 *    9: 3rem     (48px) - Display headings
 * 
 * 4. For component patterns:
 *    .heading-1 { 
 *      font-family: font-family('heading');
 *      font-size: font-size(8);
 *      font-weight: font-weight('bold');
 *      line-height: line-height('tight');
 *    }
 */

/**
 * Typography Configuration
 */

// Font families
$font-families: (
  "base": (
    "Roboto",
    -apple-system,
    BlinkMacSystemFont,
    "Segoe UI",
    "Helvetica Neue",
    Arial,
    "Noto Sans",
    sans-serif,
    "Apple Color Emoji",
    "Segoe UI Emoji",
    "Segoe UI Symbol",
    "Noto Color Emoji",
  ),
  "heading": (
    "Roboto",
    -apple-system,
    BlinkMacSystemFont,
    "Segoe UI",
    "Helvetica Neue",
    Arial,
    "Noto Sans",
    sans-serif,
    "Apple Color Emoji",
    "Segoe UI Emoji",
    "Segoe UI Symbol",
    "Noto Color Emoji",
  ),
  "mono": (
    "SFMono-Regular",
    Consolas,
    "Liberation Mono",
    Menlo,
    Monaco,
    "Courier New",
    monospace,
  ),
);

// Font weights
$font-weights: (
  "light": 300,
  "regular": 400,
  "medium": 500,
  "semibold": 600,
  "bold": 700,
);

// Font sizes - Scaled progression
$font-sizes: (
  1: 0.75rem,
  // 12px - Small labels, footnotes
  2: 0.875rem,
  // 14px - Secondary text
  3: 1rem,
  // 16px - Body text
  4: 1.125rem,
  // 18px - Large body text
  5: 1.25rem,
  // 20px - Small headings
  6: 1.5rem,
  // 24px - Medium headings
  7: 1.875rem,
  // 30px - Large headings
  8: 2.25rem,
  // 36px - Extra large headings
  9: 3rem // 48px - Display headings,,,,,
);

// Line heights
$line-heights: (
  "none": 1,
  "tight": 1.25,
  "snug": 1.375,
  "normal": 1.5,
  "relaxed": 1.625,
  "loose": 2,
);

// Letter spacing
$letter-spacing: (
  "tight": -0.025em,
  "normal": 0,
  "wide": 0.025em,
  "wider": 0.05em,
  "widest": 0.1em,
);

/**
 * Function to get font family
 * @param {String} $name - The font family name from the $font-families map
 * @return {List} The list of font family values
 * @example font-family: font-family('heading'); // Returns 'Inter', -apple-system, etc.
 */
@function font-family($name: "base") {
  @if map-has-key($font-families, $name) {
    @return map-get($font-families, $name);
  }
  @error "Font family '#{$name}' not found.";
  @return null;
}

/**
 * Function to get font weight
 * @param {String} $name - The font weight name from the $font-weights map
 * @return {Number} The font weight value
 * @example font-weight: font-weight('bold'); // Returns 700
 */
@function font-weight($name: "regular") {
  @if map-has-key($font-weights, $name) {
    @return map-get($font-weights, $name);
  }
  @error "Font weight '#{$name}' not found.";
  @return null;
}

/**
 * Function to get font size
 * @param {String} $name - The font size name from the $font-sizes map
 * @return {Length} The font size value in rem
 * @example font-size: font-size('lg'); // Returns 1.125rem
 */
@function font-size($name: "base") {
  @if map-has-key($font-sizes, $name) {
    @return map-get($font-sizes, $name);
  }
  @error "Font size '#{$name}' not found.";
  @return null;
}

/**
 * Function to get line height
 * @param {String} $name - The line height name from the $line-heights map
 * @return {Number} The line height value
 * @example line-height: line-height('tight'); // Returns 1.25
 */
@function line-height($name: "normal") {
  @if map-has-key($line-heights, $name) {
    @return map-get($line-heights, $name);
  }
  @error "Line height '#{$name}' not found.";
  @return null;
}

/**
 * Function to get letter spacing
 * @param {String} $name - The letter spacing name from the $letter-spacing map
 * @return {Length} The letter spacing value in em
 * @example letter-spacing: letter-spacing('wide'); // Returns 0.025em
 */
@function letter-spacing($name: "normal") {
  @if map-has-key($letter-spacing, $name) {
    @return map-get($letter-spacing, $name);
  }
  @error "Letter spacing '#{$name}' not found.";
  @return null;
}

/**
 * Generate CSS typography variables
 * Creates: --font-size-X, --line-height-X, --letter-spacing-X, and --font-weight-X variables
 * @example @include generate-typography-variables();
 */
@mixin generate-typography-variables() {
  :root {
    // Add font optical sizing and variation settings
    --font-optical-sizing: auto;
    --font-variation-settings: "wdth" 100;

    @each $name, $value in $font-sizes {
      --font-size-#{$name}: #{$value};
    }

    @each $name, $value in $line-heights {
      --line-height-#{$name}: #{$value};
    }

    @each $name, $value in $letter-spacing {
      --letter-spacing-#{$name}: #{$value};
    }

    @each $name, $value in $font-weights {
      --font-weight-#{$name}: #{$value};
    }
  }
}

// Add a mixin for font base styles
@mixin font-base-styles {
  font-optical-sizing: var(--font-optical-sizing);
  font-style: normal;
  font-variation-settings: var(--font-variation-settings);
}
